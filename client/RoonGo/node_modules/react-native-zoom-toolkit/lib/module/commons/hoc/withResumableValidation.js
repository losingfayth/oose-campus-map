function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef } from 'react';
export default function withResumableValidation(Component) {
  return /*#__PURE__*/forwardRef((props, ref) => {
    const {
      minScale,
      maxScale,
      children
    } = props;
    const childrenCount = React.Children.count(children);
    if (childrenCount !== 1) {
      const message = `ResumableZoom expected one child but received ${childrenCount} children`;
      throw new Error(message);
    }
    if (minScale !== undefined && minScale < 1) {
      throw new Error('minScale must be greater than or equals one');
    }
    const isMaxScaleNumber = typeof maxScale === 'number';
    if (isMaxScaleNumber && maxScale < 1) {
      throw new Error('maxScale must be greater than one, or a SizeVector object in order to infer the max scale');
    }
    if (minScale && isMaxScaleNumber && minScale > maxScale) {
      throw new Error('minScale must not be greater maxScale');
    }
    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
      reference: ref
    }));
  });
}
//# sourceMappingURL=withResumableValidation.js.map